/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

public class MCLDHimalayaEngine extends PricingEngine {
  private transient long swigCPtr;
  private transient boolean swigCMemOwnDerived;

  protected MCLDHimalayaEngine(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.MCLDHimalayaEngine_SWIGSmartPtrUpcast(cPtr), true);
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MCLDHimalayaEngine obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void swigSetCMemOwn(boolean own) {
    swigCMemOwnDerived = own;
    super.swigSetCMemOwn(own);
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwnDerived) {
        swigCMemOwnDerived = false;
        QuantLibJNI.delete_MCLDHimalayaEngine(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public MCLDHimalayaEngine(StochasticProcessArray process, boolean brownianBridge, boolean antitheticVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed) {
    this(QuantLibJNI.new_MCLDHimalayaEngine__SWIG_0(StochasticProcessArray.getCPtr(process), process, brownianBridge, antitheticVariate, requiredSamples, requiredTolerance, maxSamples, seed), true);
  }

  public MCLDHimalayaEngine(StochasticProcessArray process, boolean brownianBridge, boolean antitheticVariate, int requiredSamples, double requiredTolerance, int maxSamples) {
    this(QuantLibJNI.new_MCLDHimalayaEngine__SWIG_1(StochasticProcessArray.getCPtr(process), process, brownianBridge, antitheticVariate, requiredSamples, requiredTolerance, maxSamples), true);
  }

  public MCLDHimalayaEngine(StochasticProcessArray process, boolean brownianBridge, boolean antitheticVariate, int requiredSamples, double requiredTolerance) {
    this(QuantLibJNI.new_MCLDHimalayaEngine__SWIG_2(StochasticProcessArray.getCPtr(process), process, brownianBridge, antitheticVariate, requiredSamples, requiredTolerance), true);
  }

  public MCLDHimalayaEngine(StochasticProcessArray process, boolean brownianBridge, boolean antitheticVariate, int requiredSamples) {
    this(QuantLibJNI.new_MCLDHimalayaEngine__SWIG_3(StochasticProcessArray.getCPtr(process), process, brownianBridge, antitheticVariate, requiredSamples), true);
  }

  public MCLDHimalayaEngine(StochasticProcessArray process, boolean brownianBridge, boolean antitheticVariate) {
    this(QuantLibJNI.new_MCLDHimalayaEngine__SWIG_4(StochasticProcessArray.getCPtr(process), process, brownianBridge, antitheticVariate), true);
  }

  public MCLDHimalayaEngine(StochasticProcessArray process, boolean brownianBridge) {
    this(QuantLibJNI.new_MCLDHimalayaEngine__SWIG_5(StochasticProcessArray.getCPtr(process), process, brownianBridge), true);
  }

  public MCLDHimalayaEngine(StochasticProcessArray process) {
    this(QuantLibJNI.new_MCLDHimalayaEngine__SWIG_6(StochasticProcessArray.getCPtr(process), process), true);
  }

}
