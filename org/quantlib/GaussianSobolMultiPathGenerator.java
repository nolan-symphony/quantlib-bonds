/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

public class GaussianSobolMultiPathGenerator {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected GaussianSobolMultiPathGenerator(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GaussianSobolMultiPathGenerator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_GaussianSobolMultiPathGenerator(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public GaussianSobolMultiPathGenerator(StochasticProcess arg0, TimeGrid timeGrid, GaussianLowDiscrepancySequenceGenerator generator, boolean brownianBridge) {
    this(QuantLibJNI.new_GaussianSobolMultiPathGenerator__SWIG_0(StochasticProcess.getCPtr(arg0), arg0, TimeGrid.getCPtr(timeGrid), timeGrid, GaussianLowDiscrepancySequenceGenerator.getCPtr(generator), generator, brownianBridge), true);
  }

  public GaussianSobolMultiPathGenerator(StochasticProcess arg0, TimeGrid timeGrid, GaussianLowDiscrepancySequenceGenerator generator) {
    this(QuantLibJNI.new_GaussianSobolMultiPathGenerator__SWIG_1(StochasticProcess.getCPtr(arg0), arg0, TimeGrid.getCPtr(timeGrid), timeGrid, GaussianLowDiscrepancySequenceGenerator.getCPtr(generator), generator), true);
  }

  public GaussianSobolMultiPathGenerator(StochasticProcess process, DoubleVector times, GaussianLowDiscrepancySequenceGenerator generator, boolean brownianBridge) {
    this(QuantLibJNI.new_GaussianSobolMultiPathGenerator__SWIG_2(StochasticProcess.getCPtr(process), process, DoubleVector.getCPtr(times), times, GaussianLowDiscrepancySequenceGenerator.getCPtr(generator), generator, brownianBridge), true);
  }

  public GaussianSobolMultiPathGenerator(StochasticProcess process, DoubleVector times, GaussianLowDiscrepancySequenceGenerator generator) {
    this(QuantLibJNI.new_GaussianSobolMultiPathGenerator__SWIG_3(StochasticProcess.getCPtr(process), process, DoubleVector.getCPtr(times), times, GaussianLowDiscrepancySequenceGenerator.getCPtr(generator), generator), true);
  }

  public SampleMultiPath next() {
    return new SampleMultiPath(QuantLibJNI.GaussianSobolMultiPathGenerator_next(swigCPtr, this), false);
  }

  public SampleMultiPath antithetic() {
    return new SampleMultiPath(QuantLibJNI.GaussianSobolMultiPathGenerator_antithetic(swigCPtr, this), false);
  }

}
